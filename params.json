{"name":"Jquery.django-formset","tagline":"Dynamic formsets for Django","body":"# Django Formset\r\n\r\nAdd new forms to Django form sets dynamically. Supports nested formsets and Bootstrap tabs.\r\n\r\n[![Build Status](https://travis-ci.org/mbertheau/jquery.django-formset.png?branch=master)](https://travis-ci.org/mbertheau/jquery.django-formset)\r\n\r\nDownload the [production version][min] or the [development version][max].\r\n\r\n[min]: https://raw.github.com/mbertheau/jquery.django-formset/master/dist/django-formset.min.js\r\n[max]: https://raw.github.com/mbertheau/jquery.django-formset/master/dist/django-formset.js\r\n\r\n## Examples\r\n\r\n### A simple formset as a list\r\n\r\n```html\r\n<ul id=\"formset\">\r\n    {{ formset.management_form }}\r\n    {{ formset.non_form_errors }}\r\n    <li class=\"empty-form\">\r\n        {{ formset.empty_form.as_p }}\r\n    </li>\r\n    {% for form in formset %}\r\n        <li>\r\n            {{ form.as_p }}\r\n        </li>\r\n    {% endfor %}\r\n</ul>\r\n<button type=\"button\" class=\"action-add-formset\"></button>\r\n\r\n<script type=\"text/javascript\">\r\n    $(function() {\r\n        formset = $('#formset').children('li').djangoFormset();\r\n        $('#formset').on('click', '.action-add-formset', function(event) {\r\n            formset.addForm();\r\n        });\r\n    });\r\n</script>\r\n```\r\n\r\nYou have to create an \"add another form\" `<button>` or `<a>` yourself somewhere and on click call\r\nthe `addForm` method on the object returned by `djangoFormset()`.\r\n\r\n### How it works\r\n\r\nPass a jQuery selection of the form elements in your formset. One of the form elements must be a\r\nform template, and it must have the CSS class passed as option `formTemplateClass` (`'empty-form'`\r\nby default). That class should be styled to be invisible. The correct form prefix is derived from\r\nthe name of the first form element in the form template. For every form a Form object is created. If\r\na form includes a delete checkbox it is replaced with a delete button. Dynamically added forms\r\nalways have a delete button. The form object is also accessible via `.data('djangoFormset.Form')` on\r\nthe any of the form elements.\r\n\r\nWhen a form is added the template is copied and its `empty-form` CSS class is removed. The new form\r\nis always added after the last existing form, or after the form template, if there are no existing\r\nforms. Inside the new form in the attributes of the following elements the correct form index is\r\nput in place of `__prefix__`:\r\n\r\n* `id` and `name` attributes of `<input>`, `<select>` and `<textarea>`\r\n* `for` attribute of `<label>`\r\n* `id` attribute of the form's root element if that's a `<div>`\r\n\r\nAfter adding the `formAdded` event is triggered to which you can attach a listener to do additional\r\nsetup on the new form. The listener is passed the newly created form object. The `elem` member of\r\nthe form object is the jquery object that contains the DOM node of the new form.\r\n\r\nWhen a form is deleted that was dynamically added before, it is removed from the DOM completely and\r\nthe remaining forms are renumbered. If a form is deleted that existed on page load, it is just\r\nhidden and marked as deleted.\r\n\r\nForms can be deleted from JavaScript by calling `delete()` on the form object or `deleteForm(index)`\r\non the object returned by `djangoFormset`. `index` is the 0-based form number. Hidden forms count\r\ntowards this index as well.\r\n\r\nIf something doesn't work have a look at the JavaScript console. For a number of error conditions\r\nexceptions are raised.\r\n\r\n### A Bootstrap-tabbed formset\r\n\r\n```html\r\n<div id=\"formset\">\r\n    {{ formset.management_form }}\r\n    {{ formset.non_form_errors }}\r\n    <ul class=\"nav nav-tabs\">\r\n        <li class=\"empty-form\">\r\n            <a href=\"#{{ formset.empty_form.prefix }}\" data-toggle=\"tab\">New tab</a>\r\n        </li>\r\n        {% for form in formset %}\r\n            <li class=\"{% if forloop.first %}active{% endif %}\">\r\n                <a href=\"#{{ form.prefix }}\" data-toggle=\"tab\">\r\n                    {{ forloop.counter }}\r\n                </a>\r\n            </li>\r\n        {% endfor %}\r\n        <li>\r\n            <a class=\"btn action-add-formset\">\"Add another form</a>\r\n        </li>\r\n    </ul>\r\n\r\n    <div class=\"tab-content form-inline\">\r\n        <div class=\"tab-pane empty-form\" id=\"{{ formset.empty_form.prefix }}\">\r\n            {{ formset.empty_form.as_p }}\r\n        </div>\r\n        {% for form in formset %}\r\n            <div class=\"tab-pane{% if forloop.first %} active{% endif %}\"\r\n                 id=\"{{ form.prefix }}\">\r\n                {% if form.instance.pk %}{{ form.DELETE }}{% endif %}\r\n                {{ form.as_p }}\r\n            </div>\r\n        {% endfor %}\r\n    </div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    $(function() {\r\n        formset = $('#formset').find('.tab-content > .tab-pane').djangoFormset();\r\n        $('#formset').on('click', '.action-add-formset', function(event) {\r\n            /* set tab handle text */\r\n            form.tab.elem.find('a').text(form.index + 1);\r\n            formset.addForm();\r\n        });\r\n    });\r\n</script>\r\n```\r\n\r\n### How it works\r\n\r\nThe tab functionality is triggered by the template form having the CSS class `tab-pane`.\r\n\r\nTo find the tab navigation `djangoFormset` then looks for a child of a `.nav` that has an `<a>` or a\r\n`<button>` with a `href` or `data-target` that references the `id` of the form template root\r\nelement.  In the example that `id` is the form prefix.\r\n\r\nWhen a new form is added a new tab is added after the last visible tab or after the template tab if\r\nthere's no visible tab. Inside the tab the `href` and `data-target` attributes of `<a>` and\r\n`<button>` elements are updated to reflect the new form index.\r\n\r\nWhen a form is deleted the tab is hidden or removed depending on whether the form existed at page\r\nload time or not.\r\n\r\n### A nested Bootstrap-tabbed formset\r\n\r\nUse the python package [django-nested-formset] for the Django side of things.\r\n\r\n[django-nested-formset]: https://pypi.python.org/pypi/django-nested-formset\r\n\r\nIn the view:\r\n\r\n```python\r\nformset_class = nestedformset_factory(\r\n    models.Block,\r\n    models.Building,\r\n    nested_formset=inlineformset_factory(models.Building, models.Tenant),\r\n)\r\n```\r\n\r\nIn the template:\r\n```html\r\n{{ outer_formset.management_form }}\r\n{{ outer_formset.non_form_errors }}\r\n<ul class=\"nav nav-tabs\">\r\n    <li class=\"empty-form\">\r\n        <a href=\"#{{ outer_formset.empty_form.prefix }}\" data-toggle=\"tab\">New tab</a>\r\n    </li>\r\n    {% for outer_form in outer_formset %}\r\n        <li class=\"{% if forloop.first %}active{% endif %}\">\r\n            <a href=\"#{{ outer_form.prefix }}\" data-toggle=\"tab\">Existing tab</a>\r\n        </li>\r\n    {% endfor %}\r\n    <li>\r\n        <a class=\"btn action-add-outer-form\">{% trans \"Add another outer form\" %}</a>\r\n    </li>\r\n</ul>\r\n\r\n<div class=\"tab-content\">\r\n    <div class=\"tab-pane empty-form\" id=\"{{ outer_formset.empty_form.prefix }}\">\r\n        <div>\r\n            {{ outer_formset.empty_form.nested.management_form }}\r\n            <div class=\"empty-form\">\r\n                {{ outer_formset.empty_form.nested.empty_form.as_p }}\r\n            </div>\r\n            {% for inner_form in outer_formset.empty_form.nested %}\r\n                <div>\r\n                    {{ inner_form.as_p }}\r\n                </div>\r\n            {% endfor %}\r\n        </div>\r\n        <div>\r\n            {{ outer_formset.empty_form.as_p }}\r\n        </div>\r\n    </div>\r\n    {% for outer_form in outer_formset %}\r\n        <div class=\"tab-pane{% if forloop.first %} active{% endif %}\"\r\n             id=\"{{ outer_form.prefix }}\">\r\n            <div>\r\n                {{ outer_form.nested.management_form }}\r\n                {{ outer_form.nested.non_form_errors }}\r\n                <div class=\"empty-form\">\r\n                    {{ outer_form.nested.empty_form.as_p }}\r\n                </div>\r\n                {% for inner_form in outer_form.nested %}\r\n                    <div>\r\n                        {{ inner_form.as_p }}\r\n                    </div>\r\n                {% endfor %}\r\n                <button type=\"button\" class=\"btn btn-primary action-add-inner-form\">\r\n                    Add another inner form\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {{ outer_form.as_p }}\r\n            </div>\r\n        </div>\r\n    {% endfor %}\r\n    <div class=\"actions\">\r\n        <button type=\"button\" class=\"btn btn-primary action-add-outer-form\">\r\n            Add another outer form\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<script type=\"text/javascript\">\r\n    var outerFormset = $(\"div.tab-content > div.tab-pane\").not('.actions')\r\n        .djangoFormset({\r\n        on: {\r\n            formInitialized: function(event, form) {\r\n                /* Init inner formset */\r\n                var innerFormsetElem = form.elem.children('div').first();\r\n                var innerFormset = innerFormsetElem.children('div').djangoFormset();\r\n                innerFormsetElem.on('click', '.action-add-inner-form', function(event) {\r\n                    innerFormset.addForm();\r\n                });\r\n            },\r\n            formAdded: function(event, form) {\r\n                /* Optionally set tab header text on new forms */\r\n                form.tab.elem.find('a').text(\"Form number \" + (form.index + 1));\r\n            }\r\n        }\r\n    });\r\n    /* Add new outer form on add button click */\r\n    $().on('click', '.action-add-outer-form', function(event) {\r\n        outerFormset.addForm();\r\n    });\r\n    /* Optionally update tab label based on input value */\r\n    $().on('change', 'input:not([name*=\"__prefix__\"]):first', function() {\r\n        var tabLabel = \"First input value is \" + $(this).val();\r\n        form = $(this).closest('.tab-pane').data('djangoFormset.Form');\r\n        form.tab.elem.find('a').text(tabLabel);\r\n    });\r\n</script>\r\n```\r\n\r\n### How it works\r\n\r\nThe plugin takes care to replace just the first occurrence of the template marker `__prefix__`. It\r\nalso is careful not to leave the boundaries of the current form instance when it applies the needed\r\nmodifications to the DOM. Lastly it provides events to hook up the initialization of the inner\r\nformset.\r\n\r\nI haven't tried it, but more than one nesting level should work just as fine.\r\n\r\n## Release History\r\n\r\nI'll leave this unreleased for a while until the plugin had some exposure to make sure it doesn't\r\nhave any nasty bugs. (2014-03-07)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}